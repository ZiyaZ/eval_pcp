;+
; Store as 3-D array on HRAP (1121 x 881 x 6)
; Perform flatline test as each hour is read. 
; All flatlined cells are flagged to be subdivided. 
; A cell is considered to be "flatlined" if:
;   1) Values for all hours are nonzero;
;   2) Values for all hours are identical within some floating 
;      point precision (e.g. 1.0e-6 mm);
;   3) 6-hour MPE exceeds subdivision threshold (e.g. 0.01' = 0.254 mm, 
;      or 0.06' = 1.524 mm the minimum nonzero hourly precipitation 
;      observation is 0.01).
; Perform missing data test as each hour is read. 
; Any cell with any missing data is flagged to be subdivided.
;-
PRO GET_STAGE4_QPE, AccEndDate_YYYYMMDDHH, $ ; end of accumulation
                    DurationHours, $         ; number of hours to aggregate
                    St4Dir, $                ; location of GRIB archive
                    ScratchDir, $            ; location for temp files
                    NoDataValue, $
                    MPEGrid, $
                    HRAP_GRID_PROJ_INFO = HRAPGridProjInfo

;+
; Read Stage IV precipitation from a GRIB version 1 file. The file may
; be compressed--the DECODE_GRIB1_RECORD procedure handles gzipped
; files automatically.
;
; :Params:
;
;     AccEndDate_YYYYMMDDHH : in, required, type=STRING
;         End time of accumulation period in UTC, in the form
;         YYYYMMDDHH.
;     DurationHours : in, required, type=INT
;         The length of the accumulation period in hours. A MPE
;         accumulation file of this length must be available.
;     St4Dir : in, required, type=STRING
;         The directory where MPE precipitation grids are stored.
;     ScratchDir : in, required, type=STRING
;         The directory where temporary files generated by this
;         procedure and the procedures it calls are stored.
;     NoDataValue : in, required, type=FLOAT
;         The value to use for missing/no-data on all grids. Missing
;         values for input data (e.g., 9.999e20 on GRIB data produced
;         at NCEP) are replaced by this value, and missing/no-data is
;         set to this value for all outputs.
;     MPEGrid : out, type=FLTARR(1121 x 881)
;         MPE = Multisensor Precipitation Estimate. The 2-D array of
;         GRIB record data.
;
; :Keywords:
;
;     HRAP_GRID_PROJ_INFO : type=STRUCT
;         A named variable that will capture the structure describing
;         the HRAP (polar stereographic) grid and coordinate
;         system. Including this keyword will speed up processing when
;         REFINE_MPE is called repeatedly, since it is only verified
;         (not redefined) if present as an input.
;-

  COMMON info, Message ; used by USR_MSG and ERR_MSG

;+
; Initialize output grid to !NULL. The caller should use
; ISA(MPEGrid) to judge the success/failure of this procedure.
;-
  MPEGrid = !NULL

;+
; Check arguments for correct type and valid contents.
;-
  if NOT(ISA(AccEndDate_YYYYMMDDHH, 'STRING')) then begin
      ERR_MSG, 'Target accumulation end date/time argument must be a STRING.'
      RETURN
  endif
  if (STRLEN(AccEndDate_YYYYMMDDHH) ne 10) then begin
      ERR_MSG, 'Invalid target accumulation end date/time "' + $
               AccEndDate_YYYYMMDDHH + $
               '" (required form is YYYYMMDDHH, 10 digits).'
      RETURN
  endif
  if NOT(STREGEX(AccEndDate_YYYYMMDDHH, '[0-9]{10}', /BOOLEAN)) $
      then begin
      ERR_MSG, 'Invalid target accumulation end date/time "' + $
               AccEndDate_YYYYMMDDHH + $
               '" (required form is YYYYMMDDHH, all numeric).'
      RETURN
  endif

  accEndDate_Julian = YYYYMMDDHH_TO_JULIAN(AccEndDate_YYYYMMDDHH)
  accEndDate_YYYY = STRMID(AccEndDate_YYYYMMDDHH, 0, 4)
  accEndDate_MM = STRMID(AccEndDate_YYYYMMDDHH, 4, 2)
  accEndDate_DD = STRMID(AccEndDate_YYYYMMDDHH, 6, 2)
  accEndDate_HH = STRMID(AccEndDate_YYYYMMDDHH, 8, 2)

  if (DurationHours lt 0) then begin
      ERR_MSG, 'Duration must be a positive integer number of hours.'
      RETURN
  endif
  if (DurationHours gt 24) then begin
      ERR_MSG, 'Duration argument cannot exceed 24 hours.'
      RETURN
  endif

  if NOT(ISA(St4Dir, 'STRING')) then begin
      ERR_MSG, 'Location of Stage IV archive must be a STRING.'
      RETURN
  endif
  if NOT(FILE_TEST(St4Dir, /DIRECTORY)) then begin
      ERR_MSG, 'Stage IV archive directory "' + St4Dir + '" not found.'
      RETURN
  endif
  if NOT(FILE_TEST(St4Dir, /READ)) then begin
      ERR_MSG, 'Stage IV archive directory "' + St4Dir + '" not readable.'
      RETURN
  endif

  if NOT(ISA(ScratchDir, 'STRING')) then begin
      ERR_MSG, 'Location of scratch directory must be a STRING.'
      RETURN
  endif
  if NOT(FILE_TEST(ScratchDir, /DIRECTORY)) then begin
      ERR_MSG, 'Scratch directory "' + ScratchDir + '" not found.'
      RETURN
  endif
  if NOT(FILE_TEST(ScratchDir, /READ)) then begin
      ERR_MSG, 'Scratch directory "' + ScratchDir + '" not readable.'
      RETURN
  endif
  if NOT(FILE_TEST(ScratchDir, /WRITE)) then begin
      ERR_MSG, 'Scratch directory "' + ScratchDir + '" not writeable.'
      RETURN
  endif

  if NOT(ISA(NoDataValue, 'FLOAT')) then $
      USR_MSG, 'WARNING: no-data value should be a floating point value.'

  if KEYWORD_SET(HRAPGridProjInfo) then begin

;+
;     Verify the structure of HRAPGridProjInfo.
;
;     HRAPGridProjInfo = $
;       {lonV:  lonV, $           ; orientation longitude
;        latD:  latD, $           ; lat where dx and dy are specified
;        eRadM: 6371200.0D, $     ; NCEP sphere radius, meters
;        lat00: lat00, $          ; deprojected lat of LL cell center
;        lon00: lon00, $          ; deprojected lon of LL cell center
;        nCols: nx, $             ; # columns
;        nRows: ny, $             ; # rows
;        dx:    dx, $             ; x resolution at latD, meters
;        dy:    dy}               ; y resolution at latD, meters
;-
      foo = SIZE(HRAPGridProjInfo)
      if (foo[0] ne 1) then begin
          ERR_MSG, 'HRAP_GRID_PROJ_INFO structure mismatch (non-scalar).'
          RETURN
      endif

      if ((foo[1] ne 1) or (foo[2] ne 8)) then begin
          ERR_MSG, 'HRAP_GRID_PROJ_INFO structure mismatch ' + $
                   '(not a structure).'
          RETURN
      endif

      structOk = 1

      tagNames = TAG_NAMES(HRAPGridProjInfo)

      ind = WHERE(tagNames eq 'LONV', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "lonV" tag in HRAP_GRID_PROJ_INFO.'
          structOk = 0
      endif
      ind = WHERE(tagNames eq 'LATD', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "latD" tag in HRAP_GRID_PROJ_INFO.'
          structOk = 0
      endif
      ind = WHERE(tagNames eq 'ERADM', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "eRadM" tag in HRAP_GRID_PROJ_INFO.'
          structOk = 0
      endif
      ind = WHERE(tagNames eq 'LAT00', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "lat00" tag in HRAP_GRID_PROJ_INFO.'
          structOk = 0
      endif
      ind = WHERE(tagNames eq 'LON00', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "lon00" tag in HRAP_GRID_PROJ_INFO.'
          structOk = 0
      endif
      ind = WHERE(tagNames eq 'NCOLS', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "nCols" tag in HRAP_GRID_PROJ_INFO.'
          structOk = 0
      endif
      ind = WHERE(tagNames eq 'NROWS', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "nRows" tag in HRAP_GRID_PROJ_INFO.'
          structOk = 0
      endif
      ind = WHERE(tagNames eq 'DX', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "dx" tag in HRAP_GRID_PROJ_INFO.'
          structOk = 0
      endif
      ind = WHERE(tagNames eq 'DY', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "dy" tag in HRAP_GRID_PROJ_INFO.'
          structOk = 0
      endif

      if structOk then begin

          if NOT(ISA(HRAPGridProjInfo.lonV, 'DOUBLE')) then begin
              ERR_MSG, 'HRAP_GRID_PROJ_INFO element "lonV" is not ' + $
                       'type DOUBLE.'
              structOk = 0
          endif
          if NOT(ISA(HRAPGridProjInfo.latD, 'DOUBLE')) then begin
              ERR_MSG, 'HRAP_GRID_PROJ_INFO element "latD" is not ' + $
                       'type DOUBLE.'
              structOk = 0
          endif
          if NOT(ISA(HRAPGridProjInfo.eRadM, 'DOUBLE')) then begin
              ERR_MSG, 'HRAP_GRID_PROJ_INFO element "eRadM" is not ' + $
                       'type DOUBLE.'
              structOk = 0
          endif
          if NOT(ISA(HRAPGridProjInfo.lat00, 'DOUBLE')) then begin
              ERR_MSG, 'HRAP_GRID_PROJ_INFO element "lat00" is not ' + $
                       'type DOUBLE.'
              structOk = 0
          endif
          if NOT(ISA(HRAPGridProjInfo.lon00, 'DOUBLE')) then begin
              ERR_MSG, 'HRAP_GRID_PROJ_INFO element "lon00" is not ' + $
                       'type DOUBLE.'
              structOk = 0
          endif
          if NOT(ISA(HRAPGridProjInfo.nCols, 'LONG')) then begin
              ERR_MSG, 'HRAP_GRID_PROJ_INFO element "nCols" is not ' + $
                       'type LONG.'
              structOk = 0
          endif
          if NOT(ISA(HRAPGridProjInfo.nRows, 'LONG')) then begin
              ERR_MSG, 'HRAP_GRID_PROJ_INFO element "nRows" is not ' + $
                       'type LONG.'
              structOk = 0
          endif
          if NOT(ISA(HRAPGridProjInfo.dx, 'DOUBLE')) then begin
              ERR_MSG, 'HRAP_GRID_PROJ_INFO element "dx" is not ' + $
                       'type DOUBLE.'
              structOk = 0
          endif
          if NOT(ISA(HRAPGridProjInfo.dy, 'DOUBLE')) then begin
              ERR_MSG, 'HRAP_GRID_PROJ_INFO element "dy" is not ' + $
                       'type DOUBLE.'
              structOk = 0
          endif

      endif

      if NOT(structOk) then begin
          ERR_MSG, 'Unexpected structure/content in HRAP_GRID_PROJ_INFO ' + $
                   'structure.'
          RETURN
      endif

  endif

;+
; Locate the GRIB file. Look for three cases: no extension, gzipped
; (ending in ".gz"), compressed (ending in ".Z"),.
;-
  accEndDate_YYYYMMDD = accEndDate_YYYY + accEndDate_MM + $
                        accEndDate_DD

  GRIBDir = St4Dir + '/' + accEndDate_YYYY + '/' + $
            accEndDate_YYYYMMDD
  GRIBFile = 'ST4.' + accEndDate_YYYYMMDDHH + '.' + $
             STRING(DurationHours, FORMAT = '(I2.2)') + 'h'
  GRIBFilePath = GRIBDir + '/' + GRIBFile
  ext = ''

  if NOT(FILE_TEST(GRIBFilePath)) then begin
      ext = '.gz'
      if NOT(FILE_TEST(GRIBFilePath + ext)) then begin
          ext = '.Z'
          if NOT(FILE_TEST(GRIBFilePath + ext)) $
              then begin
              ERR_MSG, 'Input Stage IV file ' + $
                       GRIBFilePath + '[.gz,.Z] not found.'
              RETURN
          endif
      endif
  endif

  GRIBFilePath = GRIBFilePath + ext
;  USR_MSG, 'Reading ' + GRIBFilePath

  GRIBFieldAbbrev = 'APCP' ; total precipitation

  DECODE_GRIB1_RECORD, GRIBFilePath, $
                       ScratchDir, $
                       GRIBFieldAbbrev, $
                       units, $
                       refTime_YYYYMMDDHH, $
                       timeRange, $
                       p1, $
                       p2, $
                       nx, $
                       ny, $
                       MPEGrid_, $
                       NO_DATA_VALUE = NoDataValue

  if NOT(ISA(MPEGrid_)) then begin
      ERR_MSG, 'Failed to decode "' + GRIBFieldAbbrev + '" from ' + $
               GRIBFilePath
      RETURN
  endif

  expectedUnits = 'kg/m^2'
  if (units ne expectedUnits) then begin
      ERR_MSG, 'GRIB record units "' + units + '" ' + $
               'does not match expected value "' + expectedUnits + '".'
      RETURN
  endif

  if (nx ne 1121) then begin
      ERR_MSG, 'GRIB record # columns (' + $
               STRCOMPRESS(nx, /REMOVE_ALL) + $
               ') does not match expected value (1121).'
      RETURN
  endif
            
  if (ny ne 881) then begin
      ERR_MSG, 'GRIB record # rows (' + $
               STRCOMPRESS(ny, /REMOVE_ALL) + $
               ') does not match expected value (881).'
      RETURN
  endif

  if NOT(KEYWORD_SET(HRAPGridProjInfo)) then begin

;+
;     Create the HRAPGridProjInfo structure to store grid and
;     projection parameters.
;-

;+
;     Get grid geometry and projection information.
;-
      GET_GRIB1_POLAR_STEREO_GRID_INFO, $
          GRIBFilePath, $
          ScratchDir, $
          GRIBFieldAbbrev, $
          nx_, $
          ny_, $
          lat00, $
          lon00, $
          latd, $
          lonv, $
          dx, $
          dy, $
          status

      if NOT(status) then begin
          ERR_MSG, 'Failed to read GRIB header from ' + $
                   GRIBFilePath
          RETURN
      endif

      if (nx_ ne 1121) then begin
          ERR_MSG, 'GRIB header # columns (' + $
                   STRCOMPRESS(nx_, /REMOVE_ALL) + $
                   ') does not match expected value (1121).'
          RETURN
      endif
            
      if (ny_ ne 881) then begin
          ERR_MSG, 'GRIB header # rows (' + $
                   STRCOMPRESS(ny_, /REMOVE_ALL) + $
                   ') does not match expected value (881).'
          RETURN
      endif
  
      ;; if (nx_ ne nx) then begin
      ;;     ERR_MSG, 'GRIB header # columns (' + $
      ;;              STRCOMPRESS(nx_, /REMOVE_ALL) + $
      ;;              ') does not match established value (' + $
      ;;              STRCOMPRESS(nx, /REMOVE_ALL)
      ;;     RETURN
      ;; endif

      if (ny_ ne ny) then begin
          ERR_MSG, 'GRIB header # rows (' + $
                   STRCOMPRESS(ny_, /REMOVE_ALL) + $
                   ') does not match established value (' + $
                   STRCOMPRESS(ny, /REMOVE_ALL)
          RETURN
      endif

;+
;     Create data structure for the HRAP grid and projection. The
;     limitations of the GRIB version 1 specification lead to
;     insufficient precision for grid/projection parameters. Here we
;     verify the parameters as they will be interpreted by the wgrib
;     program, then use more precise replacement values.
;-
      if (dx ne 4763.0D) then begin
          ERR_MSG, 'Unexpected "dx" value in Stage IV file ' + $
                   GRIBFilePath
          RETURN
      endif
      if (dy ne 4763.0D) then begin
          ERR_MSG, 'Unexpected "dy" value in Stage IV file ' + $
                   GRIBFilePath
          RETURN
      endif
      dx = 4762.5D
      dy = 4762.5D

      if (lat00 ne 23.117D) then begin
          ERR_MSG, 'Unexpected "lat1" value in Stage IV file ' + $
                   GRIBFilePath
          RETURN
      endif
      if (lon00 ne -119.023D) then begin
          ERR_MSG, 'Unexpected "lon1" value in Stage IV file ' + $
                   GRIBFilePath
          RETURN
      endif
      lat00 = 23.1167684D       ; 23.11676840356748386
      lon00 = -119.0236000D     ; -119.02360004492176415

      HRAPGridProjInfo = $
          {lonV:  lonV, $           ; orientation longitude
           latD:  latD, $           ; lat where dx and dy are specified
           eRadM: 6371200.0D, $     ; HRAP sphere radius, meters
           lat00: lat00, $          ; deprojected lat of LL cell center
           lon00: lon00, $          ; deprojected lon of LL cell center
           nCols: nx, $             ; # columns
           nRows: ny, $             ; # rows
           dx:    dx, $             ; x resolution at latD, meters
           dy:    dy}               ; y resolution at latD, meters

  endif

;+
; Rename MPEGrid_ to MPEGrid to establish that the procedure ran
; successfully.
;-
  MPEGrid = TEMPORARY(MPEGrid_)

  RETURN

end
